---
title: "Excercise 3"
---

in Quarto (text file -> save as .qmd), main type of text is readable, not code
to add code, makepress ctrl+alt+i

## Task 0
```{r}
library("readr")
library("dplyr")
library("ggplot2")

wildschwein <- read_csv("datasets/wildschwein_BE_2056.csv")

wildschwein$TierName |> unique()

sabi <- wildschwein |>
  filter(TierName == "Sabi") |>
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz = "UTC"),
         DatetimeUTC < as.POSIXct("2015-07-03", tz = "UTC"))
# date gets converted somehow, thus out data is filtered from 06-30 22:00
# to specify the Time zone, use as.POSIXct(.., tz = "UTC")

ggplot(sabi, aes(E, N, color = DatetimeUTC)) +
  geom_point() +
  geom_path() +
  coord_equal()   #matches the coords to the output window (looks nicer)

# plotting sabi on a single y axis
sabi |>
  head(50) |>
  ggplot(aes(DatetimeUTC, 1)) +
  geom_point()
# inspecting sabi dataset shows us the sampling interval of around 15 min

sabi <- sabi |>
  mutate(
    n_plus1 = sqrt((lead(E)-E)^2 + (lead(N)-N)^2), 
    n_plus2 = sqrt((lead(E, 2)-E)^2 + (lead(N, 2)-N)^2),  #changes the offset to 2
    n_minus1 = sqrt((lag(E)-E)^2 + (lag(N)-N)^2),
    n_minus2 = sqrt((lag(E, 2)-E)^2 + (lag(N, 2)-N)^2)
  )

sabi <- sabi |>
  rowwise() |>
  mutate(
    stepMean = mean(c(n_plus1, n_plus2, n_minus1, n_minus2))  #could use ,na.rm = TRUE to remove NA from mean, but we want it as it makes more sense to get NA values when there are none in the input
  ) |>
  ungroup()  # this gets rid of the rowwise()

ggplot(sabi, aes(stepMean)) +
  geom_histogram(binwidth = 10) +
  geom_vline(xintercept = mean(sabi$stepMean, na.rm = TRUE))
# gives us an indication of which stepdistance to cut off => no movement

sabi |>
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE)) |>
  ggplot(aes(E, N)) +
  geom_path() +
  geom_point(aes(color = static)) +
  coord_fixed()


sabi |>
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE)) |> 
  filter(!static) |> 
  ggplot(aes(E,N))+
  geom_path() +
  geom_point() +
  coord_fixed() +
  theme(legend.position = "bottom")

```

to find static points, we have to define a temporal window and a threshold where to cut off points as no movement

## Preparation
```{r}
library("readr")
library("sf")
library("cowplot")

posmo <- read_delim("datasets/posmo_2023-04-10T00_00_00+02_00-2023-05-04T23_59_59+02_00.csv")

# Keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)

posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

head(posmo)

posmo_coordinates <- st_coordinates(posmo)

posmo <- cbind(posmo, posmo_coordinates)


# latest bike route
posmo_filter_date <- posmo |>
    filter(as.Date(datetime) == "2023-04-26")

```

# Task 1
using temporal window of 4, this means if stand still for 40 seconds (15 sec sampling interval (more or less)), it's a stand still
```{r}
posmo_filter <- posmo_filter_date |>
    mutate(
        nMinus2 = sqrt((lag(X, 2) - X)^2 + (lag(Y, 2) - Y)^2), # distance to pos -30 minutes
        nMinus1 = sqrt((lag(X, 1) - X)^2 + (lag(Y, 1) - Y)^2), # distance to pos -15 minutes
        nPlus1  = sqrt((X - lead(X, 1))^2 + (Y - lead(Y, 1))^2), # distance to pos +15 mintues
        nPlus2  = sqrt((X - lead(X, 2))^2 + (Y - lead(Y, 2))^2) # distance to pos +30 minutes
    )

posmo_filter <- posmo_filter |> 
  rowwise() |> 
  mutate(stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))) |> 
  ungroup()


# had to adjust the filtering, as I was nearly always riding the bike => mean stepMean just gives slow parts, not 'near standstill' parts. Would have filtered too much

# Apparently not part of this task

# posmo_filter |> 
#   mutate(static = stepMean < mean(stepMean/2, na.rm = TRUE)) |>
#   ggplot(aes(X, Y)) +
#   geom_path() +
#   geom_point(aes(color = static)) +
#   coord_fixed()
# 
# 
# posmo_filter <- posmo_filter |> 
#   mutate(static = stepMean < mean(stepMean/2, na.rm = TRUE)) |> 
#   filter(!static)
# 


```

# Task 2
```{r}

ggplot(posmo_filter, aes(stepMean)) +
  geom_histogram(binwidth = 5)
# around 25 stepMean seems good 

summary(posmo_filter$stepMean)

posmo_filter <- posmo_filter |>
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE)) 


```

# Task 3 (see also end of Task 1)
```{r}
posmo_filter |>
  ggplot(aes(X, Y)) +
  geom_path() +
  geom_point(aes(color = static)) +
  coord_fixed()
```

# Task 4 
```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

posmo_filter <- posmo_filter |>
    mutate(segment_id = rle_id(static)) |> 
    filter(!static)


head(posmo_filter)


#All segments (without static)
p1 <- posmo_filter |>
  ggplot(aes(X, Y)) +
  geom_point(aes(color = segment_id)) +
  coord_fixed() +
  ggtitle("All segments")

#Long segments
p2 <- posmo_filter |> 
  group_by(segment_id) |> 
  mutate(timediff = as.numeric(difftime(max(datetime), min(datetime)))) |>  # as.numeric gives minute here, not seconds
  filter(timediff > 5) |> 
    ggplot(aes(X, Y)) +
  geom_point(aes(color = segment_id)) +
  coord_fixed()+
  ggtitle("Long segments, removed segments <5mins")


plot_grid(p1, p2, ncol = 1)

```

# Task 5
```{r}
pedestrian <- read_csv("datasets/pedestrian.csv")

pedestrian |> 
  group_by(TrajID) |> 
  ggplot(aes(E, N)) +
  geom_point(aes(color = TrajID)) +
  geom_path() +
  facet_wrap(vars(TrajID), ncol = 3) +
  coord_fixed() +
  scale_fill_brewer(palette = "YlOrRd") +
  ggtitle("6 pedestrians seperately visualized")

```

# Task 6
```{r}

```

